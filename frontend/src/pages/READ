import React, { useState } from 'react';
import { User, Settings, Eye, Code, TestTube, Shield, ArrowRight, Edit3, MessageSquare, CheckCircle, Lock, LogOut } from 'lucide-react';

// Mock auth context for demo - replace with your actual auth context
const mockUser = {
  id: 1,
  username: 'admin',
  roles: ['Admin']
};

const rolePermissions = {
  'Admin': ['manage_users', 'assign_roles', 'create_delete_projects', 'create_edit_delete_tasks', 'assign_users', 'view_update_tasks', 'add_comments', 'mark_tested'],
  'Project Manager': ['create_edit_delete_tasks', 'assign_users', 'view_update_tasks', 'add_comments'],
  'Developer': ['view_update_tasks', 'add_comments'],
  'Tester': ['view_update_tasks', 'mark_tested', 'add_comments'],
  'Viewer': ['read_only']
};

// Mock users for role switching demo
const mockUsers = [
  { id: 1, username: 'admin', roles: ['Admin'] },
  { id: 2, username: 'manager', roles: ['Project Manager'] },
  { id: 3, username: 'dev', roles: ['Developer'] },
  { id: 4, username: 'tester', roles: ['Tester'] },
  { id: 5, username: 'viewer', roles: ['Viewer'] }
];

const getRoleIcon = (role) => {
  switch (role) {
    case 'Admin': return <Shield className="w-5 h-5" />;
    case 'Project Manager': return <Settings className="w-5 h-5" />;
    case 'Developer': return <Code className="w-5 h-5" />;
    case 'Tester': return <TestTube className="w-5 h-5" />;
    case 'Viewer': return <Eye className="w-5 h-5" />;
    default: return <User className="w-5 h-5" />;
  }
};

const getRoleColor = (role) => {
  switch (role) {
    case 'Admin': return 'from-red-500 to-pink-500';
    case 'Project Manager': return 'from-blue-500 to-indigo-500';
    case 'Developer': return 'from-green-500 to-emerald-500';
    case 'Tester': return 'from-yellow-500 to-orange-500';
    case 'Viewer': return 'from-gray-500 to-slate-500';
    default: return 'from-purple-500 to-violet-500';
  }
};

export default function Dashboard() {
  // Use mock user for demo - replace with: const { user, logout } = useAuth();
  const [user, setUser] = useState(mockUser);
  const [currentView, setCurrentView] = useState('dashboard');
  const [selectedTask, setSelectedTask] = useState(null);

  const sampleProject = {
    id: 1,
    name: "TeamTasker Core",
    description: "Core features development with role-based access control",
    tasks: [
      { 
        id: 1, 
        title: "Design Database Schema", 
        description: "Plan and create the database schema for task tracking", 
        status: "In Progress", 
        assignee: "Developer" 
      },
      { 
        id: 2, 
        title: "Implement Authentication", 
        description: "JWT-based authentication with role management", 
        status: "Completed", 
        assignee: "Developer" 
      },
      { 
        id: 3, 
        title: "Create User Interface", 
        description: "Modern UI with Tailwind CSS", 
        status: "In Progress", 
        assignee: "Developer" 
      },
      { 
        id: 4, 
        title: "Write Unit Tests", 
        description: "Comprehensive testing for all components", 
        status: "Pending", 
        assignee: "Tester" 
      },
      { 
        id: 5, 
        title: "Performance Testing", 
        description: "Load testing and optimization", 
        status: "Pending", 
        assignee: "Tester" 
      }
    ]
  };

  const hasPermission = (permission) => {
    const userRole = user.roles[0];
    return rolePermissions[userRole]?.includes(permission) || false;
  };

  const canAccessTaskDetails = () => {
    return !user.roles.includes('Viewer');
  };

  const logout = () => {
    console.log('Logout clicked');
    // Add your logout logic here
  };

  // User selector for demo purposes
  const UserSelector = () => (
    <div className="mb-4">
      <select
        value={user.id}
        onChange={(e) => {
          const selectedUser = mockUsers.find(u => u.id === parseInt(e.target.value));
          setUser(selectedUser);
          setCurrentView('dashboard');
        }}
        className="px-4 py-2 rounded-lg bg-white/10 backdrop-blur-md border border-white/20 text-white font-medium focus:outline-none focus:ring-2 focus:ring-white/30"
      >
        {mockUsers.map(user => (
          <option key={user.id} value={user.id} className="bg-gray-800 text-white">
            {user.username} ({user.roles[0]})
          </option>
        ))}
      </select>
    </div>
  );

  const Navigation = () => (
    <nav className="bg-white/10 backdrop-blur-md border-b border-white/20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16 items-center">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-sm">P</span>
            </div>
            <span className="text-xl font-bold text-white">ProjectHub</span>
          </div>
          <div className="flex items-center space-x-4">
            <div className={`flex items-center space-x-2 px-3 py-1 rounded-full bg-gradient-to-r ${getRoleColor(user.roles[0])}`}>
              {getRoleIcon(user.roles[0])}
              <span className="text-white text-sm font-medium">{user.username}</span>
              <span className="text-white/80 text-xs">({user.roles[0]})</span>
            </div>
            <button
              onClick={logout}
              className="p-2 text-white hover:bg-white/10 rounded-lg transition-colors"
            >
              <LogOut className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </nav>
  );

  const DashboardView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      <div className="absolute inset-0">
        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
      </div>
      <Navigation />
      
      <div className="relative z-10 container mx-auto px-6 py-16">
        <UserSelector />
        
        <div className="text-center mb-16">
          <h1 className="text-6xl font-bold text-white mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
            Welcome to ProjectHub
          </h1>
          <p className="text-xl text-gray-300 max-w-2xl mx-auto leading-relaxed">
            Advanced task management with role-based access control
          </p>
        </div>

        <div className="max-w-4xl mx-auto mb-16">
          <h2 className="text-2xl font-bold text-white text-center mb-8">Your Permissions</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className={`p-4 rounded-xl bg-white/10 backdrop-blur-md border border-white/20 ${hasPermission('manage_users') ? 'ring-2 ring-green-400/50' : 'opacity-50'}`}>
              <Shield className="w-6 h-6 text-white mb-2" />
              <p className="text-sm text-white font-medium">Manage Users</p>
            </div>
            <div className={`p-4 rounded-xl bg-white/10 backdrop-blur-md border border-white/20 ${hasPermission('create_edit_delete_tasks') ? 'ring-2 ring-green-400/50' : 'opacity-50'}`}>
              <Edit3 className="w-6 h-6 text-white mb-2" />
              <p className="text-sm text-white font-medium">Edit Tasks</p>
            </div>
            <div className={`p-4 rounded-xl bg-white/10 backdrop-blur-md border border-white/20 ${hasPermission('mark_tested') ? 'ring-2 ring-green-400/50' : 'opacity-50'}`}>
              <CheckCircle className="w-6 h-6 text-white mb-2" />
              <p className="text-sm text-white font-medium">Mark Tested</p>
            </div>
            <div className={`p-4 rounded-xl bg-white/10 backdrop-blur-md border border-white/20 ${hasPermission('add_comments') || hasPermission('read_only') ? 'ring-2 ring-green-400/50' : 'opacity-50'}`}>
              <MessageSquare className="w-6 h-6 text-white mb-2" />
              <p className="text-sm text-white font-medium">View/Comment</p>
            </div>
          </div>
        </div>

        <div className="max-w-2xl mx-auto">
          <h2 className="text-3xl font-bold text-white text-center mb-8">Sample Project</h2>
          <div className="group cursor-pointer" onClick={() => setCurrentView('project')}>
            <div className="p-8 rounded-2xl bg-white/10 backdrop-blur-md border border-white/20 hover:bg-white/15 transition-all duration-300 hover:scale-105 hover:shadow-2xl">
              <div className="flex items-start justify-between mb-6">
                <div>
                  <h3 className="text-2xl font-bold text-white mb-2">{sampleProject.name}</h3>
                  <p className="text-gray-300 leading-relaxed">{sampleProject.description}</p>
                </div>
                <ArrowRight className="w-6 h-6 text-white group-hover:translate-x-2 transition-transform duration-300" />
              </div>
              <div className="flex items-center justify-between pt-4 border-t border-white/20">
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-gray-300">{sampleProject.tasks.length} tasks</span>
                  <span className="text-sm text-gray-300">•</span>
                  <span className="text-sm text-gray-300">Role-based access</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const ProjectView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative">
      <Navigation />
      <div className="container mx-auto px-6 py-16">
        <div className="flex items-center space-x-4 mb-8">
          <button
            onClick={() => setCurrentView('dashboard')}
            className="px-4 py-2 rounded-lg bg-white/10 backdrop-blur-md border border-white/20 text-white hover:bg-white/20 transition-colors"
          >
            ← Back
          </button>
          <h1 className="text-4xl font-bold text-white">{sampleProject.name}</h1>
        </div>

        <div className="grid gap-6 max-w-4xl mx-auto">
          {sampleProject.tasks.map((task) => (
            <div
              key={task.id}
              className={`group p-6 rounded-xl bg-white/10 backdrop-blur-md border border-white/20 hover:bg-white/15 transition-all duration-300 ${canAccessTaskDetails() ? 'cursor-pointer hover:scale-105' : ''}`}
              onClick={() => {
                if (canAccessTaskDetails()) {
                  setSelectedTask(task);
                  setCurrentView('task');
                }
              }}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <h3 className="text-xl font-bold text-white">{task.title}</h3>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                      task.status === 'Completed' ? 'bg-green-500/20 text-green-300' :
                      task.status === 'In Progress' ? 'bg-blue-500/20 text-blue-300' :
                      'bg-yellow-500/20 text-yellow-300'
                    }`}>
                      {task.status}
                    </span>
                  </div>
                  <p className="text-gray-300 mb-3">{task.description}</p>
                  <p className="text-sm text-gray-400">Assigned to: {task.assignee}</p>
                </div>
                {canAccessTaskDetails() ? (
                  <ArrowRight className="w-5 h-5 text-white group-hover:translate-x-2 transition-transform duration-300" />
                ) : (
                  <Lock className="w-5 h-5 text-gray-500" />
                )}
              </div>
              {!canAccessTaskDetails() && (
                <div className="mt-4 p-3 bg-red-500/10 border border-red-500/20 rounded-lg">
                  <p className="text-red-300 text-sm">Viewers cannot access task details</p>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const TaskView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative">
      <Navigation />
      <div className="container mx-auto px-6 py-16">
        <div className="flex items-center space-x-4 mb-8">
          <button
            onClick={() => setCurrentView('project')}
            className="px-4 py-2 rounded-lg bg-white/10 backdrop-blur-md border border-white/20 text-white hover:bg-white/20 transition-colors"
          >
            ← Back to Project
          </button>
          <h1 className="text-4xl font-bold text-white">{selectedTask?.title}</h1>
        </div>

        <div className="max-w-4xl mx-auto space-y-8">
          <div className="p-8 rounded-xl bg-white/10 backdrop-blur-md border border-white/20">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-3">
                <span className={`px-4 py-2 rounded-full text-sm font-medium ${
                  selectedTask?.status === 'Completed' ? 'bg-green-500/20 text-green-300' :
                  selectedTask?.status === 'In Progress' ? 'bg-blue-500/20 text-blue-300' :
                  'bg-yellow-500/20 text-yellow-300'
                }`}>
                  {selectedTask?.status}
                </span>
                <span className="text-gray-300">Assigned to: {selectedTask?.assignee}</span>
              </div>
              <div className={`w-10 h-10 rounded-full bg-gradient-to-r ${getRoleColor(user.roles[0])} flex items-center justify-center`}>
                {getRoleIcon(user.roles[0])}
              </div>
            </div>
            <p className="text-gray-300 text-lg leading-relaxed mb-6">{selectedTask?.description}</p>

            <div className="space-y-4">
              <h3 className="text-xl font-bold text-white">Available Actions</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {hasPermission('create_edit_delete_tasks') && (
                  <button className="p-4 rounded-lg bg-blue-500/20 border border-blue-500/30 text-blue-300 hover:bg-blue-500/30 transition-colors flex items-center space-x-3">
                    <Edit3 className="w-5 h-5" />
                    <span>Edit Task</span>
                  </button>
                )}
                {hasPermission('mark_tested') && (
                  <button className="p-4 rounded-lg bg-green-500/20 border border-green-500/30 text-green-300 hover:bg-green-500/30 transition-colors flex items-center space-x-3">
                    <CheckCircle className="w-5 h-5" />
                    <span>Mark as Tested</span>
                  </button>
                )}
                {hasPermission('add_comments') && (
                  <button className="p-4 rounded-lg bg-purple-500/20 border border-purple-500/30 text-purple-300 hover:bg-purple-500/30 transition-colors flex items-center space-x-3">
                    <MessageSquare className="w-5 h-5" />
                    <span>Add Comment</span>
                  </button>
                )}
                {hasPermission('assign_users') && (
                  <button className="p-4 rounded-lg bg-orange-500/20 border border-orange-500/30 text-orange-300 hover:bg-orange-500/30 transition-colors flex items-center space-x-3">
                    <User className="w-5 h-5" />
                    <span>Reassign Task</span>
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Comments Section */}
          <div className="p-8 rounded-xl bg-white/10 backdrop-blur-md border border-white/20">
            <h3 className="text-xl font-bold text-white mb-6">Comments & Updates</h3>
            <div className="space-y-4">
              <div className="p-4 bg-white/5 rounded-lg border border-white/10">
                <div className="flex items-center space-x-3 mb-2">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center">
                    <Code className="w-4 h-4 text-white" />
                  </div>
                  <span className="text-white font-medium">Developer</span>
                  <span className="text-gray-400 text-sm">2 hours ago</span>
                </div>
                <p className="text-gray-300">Started working on the database schema. Making good progress on the user authentication tables.</p>
              </div>
              <div className="p-4 bg-white/5 rounded-lg border border-white/10">
                <div className="flex items-center space-x-3 mb-2">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 flex items-center justify-center">
                    <Settings className="w-4 h-4 text-white" />
                  </div>
                  <span className="text-white font-medium">Project Manager</span>
                  <span className="text-gray-400 text-sm">1 day ago</span>
                </div>
                <p className="text-gray-300">Please ensure all security best practices are followed for the authentication implementation.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div>
      {currentView === 'dashboard' && <DashboardView />}
      {currentView === 'project' && <ProjectView />}
      {currentView === 'task' && <TaskView />}
    </div>
  );
}